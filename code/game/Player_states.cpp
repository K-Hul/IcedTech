// Player_states.cpp - This file has been auto generated by the BuildTool
// Please do NOT modify this file!

#include "game_precompiled.h"
#pragma hdrstop
#include "Game_local.h"
// This file has been auto generated by the BuildTool Please do NOT modify this file!

CLASS_STATES_DECLARATION(idPlayer)
	STATE("All_Idle", idPlayer::State_All_Idle)
	STATE("All_IdleCrouch", idPlayer::State_All_IdleCrouch)
	STATE("All_IdleThink", idPlayer::State_All_IdleThink)
	STATE("All_IdleCrouchThink", idPlayer::State_All_IdleCrouchThink)
	STATE("All_Run", idPlayer::State_All_Run)
	STATE("All_RunCrouch", idPlayer::State_All_RunCrouch)
	STATE("All_RunThink", idPlayer::State_All_RunThink)
	STATE("All_RunCrouchThink", idPlayer::State_All_RunCrouchThink)
	STATE("All_Die", idPlayer::State_All_Die)
	STATE("All_Dead", idPlayer::State_All_Dead)
END_CLASS_STATES
// This file has been auto generated by the BuildTool Please do NOT modify this file!
stateResult_t idPlayer::State_All_Idle(const stateParms_t&parms)

	{
		
#ifndef CROUCH_STATE
		if (pfl.crouch) {
#else
		if (!pfl.crouch) {
#endif
			if (pfl.forward || pfl.backward) {
#ifndef CROUCH_STATE
				SetAnimState(ANIMCHANNEL_TORSO, "All_RunCrouch", 0, 0);
#else
				SetAnimState(ANIMCHANNEL_TORSO, "All_Run", 0, 0);
#endif	
			}
			else {
#ifndef CROUCH_STATE
				SetAnimState(ANIMCHANNEL_TORSO, "All_IdleCrouch", 0, 0);
#else
				SetAnimState(ANIMCHANNEL_TORSO, "All_Idle", 0, 0);
#endif	
			}
			return SRESULT_DONE;
		}
		
#ifndef CROUCH_STATE
		if (SRESULT_WAIT == State_All_IdleThink(parms)) {			
			animator.CycleAnim(ANIMCHANNEL_ALL, anim_idle, gameLocal.time, 0);
			SetAnimState(ANIMCHANNEL_TORSO, "All_IdleThink", 0, 0);
		}
#else
		if (SRESULT_WAIT == State_All_IdleCrouchThink(parms)) {			
			animator.CycleAnim(ANIMCHANNEL_ALL, anim_idle_crouch, gameLocal.time, 0);
			SetAnimState(ANIMCHANNEL_TORSO, "All_IdleCrouchThink", 0, 0);
		}
#endif	
		
		
		return SRESULT_DONE;
	}
	stateResult_t idPlayer::State_All_IdleCrouch(const stateParms_t&parms)

	{
		#define  CROUCH_STATE

#ifndef CROUCH_STATE
		if (pfl.crouch) {
#else
		if (!pfl.crouch) {
#endif
			if (pfl.forward || pfl.backward) {
#ifndef CROUCH_STATE
				SetAnimState(ANIMCHANNEL_TORSO, "All_RunCrouch", 0, 0);
#else
				SetAnimState(ANIMCHANNEL_TORSO, "All_Run", 0, 0);
#endif	
			}
			else {
#ifndef CROUCH_STATE
				SetAnimState(ANIMCHANNEL_TORSO, "All_IdleCrouch", 0, 0);
#else
				SetAnimState(ANIMCHANNEL_TORSO, "All_Idle", 0, 0);
#endif	
			}
			return SRESULT_DONE;
		}
		
#ifndef CROUCH_STATE
		if (SRESULT_WAIT == State_All_IdleThink(parms)) {			
			animator.CycleAnim(ANIMCHANNEL_ALL, anim_idle, gameLocal.time, 0);
			SetAnimState(ANIMCHANNEL_TORSO, "All_IdleThink", 0, 0);
		}
#else
		if (SRESULT_WAIT == State_All_IdleCrouchThink(parms)) {			
			animator.CycleAnim(ANIMCHANNEL_ALL, anim_idle_crouch, gameLocal.time, 0);
			SetAnimState(ANIMCHANNEL_TORSO, "All_IdleCrouchThink", 0, 0);
		}
#endif	
		
		#undef  CROUCH_STATE

		return SRESULT_DONE;
	}
	stateResult_t idPlayer::State_All_IdleThink(const stateParms_t&parms)

	{
		
		// Check to see if we need to switch from crouching to non crouching or vice versa
#ifndef CROUCH_STATE
		if (pfl.crouch) {
#else
		if (!pfl.crouch) {
#endif
			if (pfl.forward || pfl.backward)
			{
#ifndef CROUCH_STATE				
				SetAnimState(ANIMCHANNEL_TORSO, "All_Run", 0, 0);
#else
				SetAnimState(ANIMCHANNEL_TORSO, "All_RunCrouch", 0, 0);
#endif			
			}
			else
			{
#ifndef CROUCH_STATE				
				SetAnimState(ANIMCHANNEL_TORSO, "All_Idle", 0, 0);
#else				
				SetAnimState(ANIMCHANNEL_TORSO, "All_IdleCrouch", 0, 0);
#endif
			}
			return SRESULT_DONE;
		}

		if (pfl.forward || pfl.backward) {
#ifndef CROUCH_STATE				
			SetAnimState(ANIMCHANNEL_TORSO, "All_Run", 0, 0);
#else
			SetAnimState(ANIMCHANNEL_TORSO, "All_RunCrouch", 0, 0);
#endif	
			return SRESULT_DONE;

		}

		
		return SRESULT_WAIT;
	}
	stateResult_t idPlayer::State_All_IdleCrouchThink(const stateParms_t&parms)

	{
		#define  CROUCH_STATE

		// Check to see if we need to switch from crouching to non crouching or vice versa
#ifndef CROUCH_STATE
		if (pfl.crouch) {
#else
		if (!pfl.crouch) {
#endif
			if (pfl.forward || pfl.backward)
			{
#ifndef CROUCH_STATE				
				SetAnimState(ANIMCHANNEL_TORSO, "All_Run", 0, 0);
#else
				SetAnimState(ANIMCHANNEL_TORSO, "All_RunCrouch", 0, 0);
#endif			
			}
			else
			{
#ifndef CROUCH_STATE				
				SetAnimState(ANIMCHANNEL_TORSO, "All_Idle", 0, 0);
#else				
				SetAnimState(ANIMCHANNEL_TORSO, "All_IdleCrouch", 0, 0);
#endif
			}
			return SRESULT_DONE;
		}

		if (pfl.forward || pfl.backward) {
#ifndef CROUCH_STATE				
			SetAnimState(ANIMCHANNEL_TORSO, "All_Run", 0, 0);
#else
			SetAnimState(ANIMCHANNEL_TORSO, "All_RunCrouch", 0, 0);
#endif	
			return SRESULT_DONE;

		}

		#undef  CROUCH_STATE

		return SRESULT_WAIT;
	}
	stateResult_t idPlayer::State_All_Run(const stateParms_t&parms)

	{
		
#ifndef CROUCH_STATE
		if (pfl.crouch) {
#else
		if (!pfl.crouch) {
#endif
			if (pfl.forward || pfl.backward)
			{
#ifndef CROUCH_STATE				
				SetAnimState(ANIMCHANNEL_TORSO, "All_RunCrouch", 0, 0);
#else
				SetAnimState(ANIMCHANNEL_TORSO, "All_Run", 0, 0);	
#endif
			}
			else
			{
#ifndef CROUCH_STATE				
				SetAnimState(ANIMCHANNEL_TORSO, "All_IdleCrouch", 0, 0);
#else
				SetAnimState(ANIMCHANNEL_TORSO, "All_Idle", 0, 0);
#endif
			}
			
			return SRESULT_DONE;
		}

		if (!(pfl.forward || pfl.backward)) {
#ifndef CROUCH_STATE			
			SetAnimState(ANIMCHANNEL_TORSO, "All_Idle", 0, 0);
#else
			SetAnimState(ANIMCHANNEL_TORSO, "All_IdleCrouch", 0, 0);	
#endif
			return SRESULT_DONE;
		}		
#ifndef CROUCH_STATE		
		animator.CycleAnim(ANIMCHANNEL_ALL, anim_run, gameLocal.time, 0);
		SetAnimState(ANIMCHANNEL_TORSO, "All_RunThink", 0, 0);
#else
		animator.CycleAnim(ANIMCHANNEL_ALL, anim_walk_crouch, gameLocal.time, 0);
		SetAnimState(ANIMCHANNEL_TORSO, "All_RunCrouchThink", 0, 0);	
#endif

		
		return SRESULT_WAIT;
	}
	stateResult_t idPlayer::State_All_RunCrouch(const stateParms_t&parms)

	{
		#define  CROUCH_STATE

#ifndef CROUCH_STATE
		if (pfl.crouch) {
#else
		if (!pfl.crouch) {
#endif
			if (pfl.forward || pfl.backward)
			{
#ifndef CROUCH_STATE				
				SetAnimState(ANIMCHANNEL_TORSO, "All_RunCrouch", 0, 0);
#else
				SetAnimState(ANIMCHANNEL_TORSO, "All_Run", 0, 0);	
#endif
			}
			else
			{
#ifndef CROUCH_STATE				
				SetAnimState(ANIMCHANNEL_TORSO, "All_IdleCrouch", 0, 0);
#else
				SetAnimState(ANIMCHANNEL_TORSO, "All_Idle", 0, 0);
#endif
			}
			
			return SRESULT_DONE;
		}

		if (!(pfl.forward || pfl.backward)) {
#ifndef CROUCH_STATE			
			SetAnimState(ANIMCHANNEL_TORSO, "All_Idle", 0, 0);
#else
			SetAnimState(ANIMCHANNEL_TORSO, "All_IdleCrouch", 0, 0);	
#endif
			return SRESULT_DONE;
		}		
#ifndef CROUCH_STATE		
		animator.CycleAnim(ANIMCHANNEL_ALL, anim_run, gameLocal.time, 0);
		SetAnimState(ANIMCHANNEL_TORSO, "All_RunThink", 0, 0);
#else
		animator.CycleAnim(ANIMCHANNEL_ALL, anim_walk_crouch, gameLocal.time, 0);
		SetAnimState(ANIMCHANNEL_TORSO, "All_RunCrouchThink", 0, 0);	
#endif

		#undef  CROUCH_STATE

		return SRESULT_WAIT;
	}
	stateResult_t idPlayer::State_All_RunThink(const stateParms_t&parms)

	{
		
#ifndef CROUCH_STATE
		if (pfl.crouch) {
#else
		if (!pfl.crouch) {
#endif
			if (pfl.forward || pfl.backward)
			{
#ifndef CROUCH_STATE				
				SetAnimState(ANIMCHANNEL_TORSO, "All_RunCrouch", 0, 0);
#else
				SetAnimState(ANIMCHANNEL_TORSO, "All_Run", 0, 0);	
#endif
			}
			else
			{
#ifndef CROUCH_STATE				
				SetAnimState(ANIMCHANNEL_TORSO, "All_IdleCrouch", 0, 0);
#else
				SetAnimState(ANIMCHANNEL_TORSO, "All_Idle", 0, 0);	
#endif
			}
			return SRESULT_DONE;
		}

		if (!(pfl.forward || pfl.backward)) {
#ifndef CROUCH_STATE			
			SetAnimState(ANIMCHANNEL_TORSO, "All_Idle", 0, 0);
#else
			SetAnimState(ANIMCHANNEL_TORSO, "All_IdleCrouch", 0, 0);	
#endif
			return SRESULT_DONE;

		}
		
		
		return SRESULT_WAIT;
	}
	stateResult_t idPlayer::State_All_RunCrouchThink(const stateParms_t&parms)

	{
		#define  CROUCH_STATE

#ifndef CROUCH_STATE
		if (pfl.crouch) {
#else
		if (!pfl.crouch) {
#endif
			if (pfl.forward || pfl.backward)
			{
#ifndef CROUCH_STATE				
				SetAnimState(ANIMCHANNEL_TORSO, "All_RunCrouch", 0, 0);
#else
				SetAnimState(ANIMCHANNEL_TORSO, "All_Run", 0, 0);	
#endif
			}
			else
			{
#ifndef CROUCH_STATE				
				SetAnimState(ANIMCHANNEL_TORSO, "All_IdleCrouch", 0, 0);
#else
				SetAnimState(ANIMCHANNEL_TORSO, "All_Idle", 0, 0);	
#endif
			}
			return SRESULT_DONE;
		}

		if (!(pfl.forward || pfl.backward)) {
#ifndef CROUCH_STATE			
			SetAnimState(ANIMCHANNEL_TORSO, "All_Idle", 0, 0);
#else
			SetAnimState(ANIMCHANNEL_TORSO, "All_IdleCrouch", 0, 0);	
#endif
			return SRESULT_DONE;

		}
		
		#undef  CROUCH_STATE

		return SRESULT_WAIT;
	}
	stateResult_t idPlayer::State_All_Die(const stateParms_t&parms)

	{
		
		animator.PlayAnim(ANIMCHANNEL_ALL, anim_death, gameLocal.time, 0);
		SetAnimState(ANIMCHANNEL_TORSO, "All_Dead", 0, 0);
		
		return SRESULT_DONE;
	}
	stateResult_t idPlayer::State_All_Dead(const stateParms_t&parms)

	{
		
		
		return SRESULT_WAIT;
	}
	